/* ========================================================================
 * Copyright 2014 RoyalSystem
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 RoyalSystem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.RoyalSystem.experiencia.logic.mock;
import java.util.ArrayList;
import java.util.List;

import co.edu.uniandes.csw.RoyalSystem.experiencia.logic.dto.ExperienciaDTO;
import co.edu.uniandes.csw.RoyalSystem.experiencia.logic.api.IExperienciaLogicService;
import co.edu.uniandes.csw.RoyalSystem.experiencia.master.logic.api._IExperienciaMasterLogicService;
import co.edu.uniandes.csw.RoyalSystem.experiencia.master.logic.dto.ExperienciaMasterDTO;
import co.edu.uniandes.csw.RoyalSystem.comentario.logic.api.IComentarioLogicService;
import co.edu.uniandes.csw.RoyalSystem.archivo.logic.api.IArchivoLogicService;
import co.edu.uniandes.csw.RoyalSystem.comentario.logic.dto.ComentarioDTO;
import co.edu.uniandes.csw.RoyalSystem.archivo.logic.dto.ArchivoDTO;
import javax.inject.Inject;


public abstract class _ExperienciaMasterMockLogicService implements _IExperienciaMasterLogicService {

    protected static ArrayList<ExperienciaMasterDTO> experienciaMasterDtosList = new ArrayList<ExperienciaMasterDTO>() ;
    @Inject
    protected IComentarioLogicService comentarioPersistance;
    @Inject
    protected IArchivoLogicService archivoPersistance;
    @Inject
    protected IExperienciaLogicService experienciaPersistance;

    public ExperienciaMasterDTO createMasterExperiencia(ExperienciaMasterDTO experiencia) {

        experienciaPersistance.createExperiencia(experiencia.getExperienciaEntity());
        for (ArchivoDTO dto : experiencia.getCreatearchivo()) {
            experiencia.getListarchivo().add(archivoPersistance.createArchivo(dto));
        }
        for (ComentarioDTO dto : experiencia.getCreatecomentario()) {
            experiencia.getListcomentario().add(comentarioPersistance.createComentario(dto));
        }
        experienciaMasterDtosList.add(experiencia);
        return experiencia;
    }

    public ExperienciaMasterDTO getMasterExperiencia(Long id) {
        for (ExperienciaMasterDTO experienciaMasterDTO : experienciaMasterDtosList) {
            if (experienciaMasterDTO.getExperienciaEntity().getId() == id) {
                return experienciaMasterDTO;
            }
        }

        return null;
    }

    public void deleteMasterExperiencia(Long id) {
        for (ExperienciaMasterDTO experienciaMasterDTO : experienciaMasterDtosList) {
            if (experienciaMasterDTO.getExperienciaEntity().getId() == id) {

                for (ArchivoDTO dto : experienciaMasterDTO.getCreatearchivo()) {
                    archivoPersistance.deleteArchivo(dto.getId());
                }
                experienciaPersistance.deleteExperiencia(experienciaMasterDTO.getId());
                experienciaMasterDtosList.remove(experienciaMasterDTO);
                for (ComentarioDTO dto : experienciaMasterDTO.getCreatecomentario()) {
                    comentarioPersistance.deleteComentario(dto.getId());
                }
                experienciaPersistance.deleteExperiencia(experienciaMasterDTO.getId());
                experienciaMasterDtosList.remove(experienciaMasterDTO);
            }
        }

    }

    public void updateMasterExperiencia(ExperienciaMasterDTO experiencia) {

		ExperienciaMasterDTO currentExperiencia = getMasterExperiencia(experiencia.getExperienciaEntity().getId());
		if (currentExperiencia == null) {
			currentExperiencia = experiencia;
		}else{
			experienciaMasterDtosList.remove(currentExperiencia);
		}

        // update Archivo
        if (experiencia.getUpdatearchivo() != null) {
            for (ArchivoDTO dto : experiencia.getUpdatearchivo()) {
                archivoPersistance.updateArchivo(dto);
                for (ArchivoDTO archivodto : currentExperiencia.getListarchivo()) {
					if (archivodto.getId() == dto.getId()) {
						currentExperiencia.getListarchivo().remove(archivodto);
						currentExperiencia.getListarchivo().add(dto);
					}
				}
            }
        }
        // persist new Archivo
        if (experiencia.getCreatearchivo() != null) {
            for (ArchivoDTO dto : experiencia.getCreatearchivo()) {
                ArchivoDTO persistedArchivoDTO = archivoPersistance.createArchivo(dto);
                dto = persistedArchivoDTO;
                currentExperiencia.getListarchivo().add(dto);
            }
        }
        // delete Archivo
        if (experiencia.getDeletearchivo() != null) {
            for (ArchivoDTO dto : experiencia.getDeletearchivo()) {
				for (ArchivoDTO archivodto : currentExperiencia.getListarchivo()) {
					if (archivodto.getId() == dto.getId()) {
						currentExperiencia.getListarchivo().remove(archivodto);
					}
				}
                archivoPersistance.deleteArchivo(dto.getId());
            }
        }
        // update Comentario
        if (experiencia.getUpdatecomentario() != null) {
            for (ComentarioDTO dto : experiencia.getUpdatecomentario()) {
                comentarioPersistance.updateComentario(dto);
                for (ComentarioDTO comentariodto : currentExperiencia.getListcomentario()) {
					if (comentariodto.getId() == dto.getId()) {
						currentExperiencia.getListcomentario().remove(comentariodto);
						currentExperiencia.getListcomentario().add(dto);
					}
				}
            }
        }
        // persist new Comentario
        if (experiencia.getCreatecomentario() != null) {
            for (ComentarioDTO dto : experiencia.getCreatecomentario()) {
                ComentarioDTO persistedComentarioDTO = comentarioPersistance.createComentario(dto);
                dto = persistedComentarioDTO;
                currentExperiencia.getListcomentario().add(dto);
            }
        }
        // delete Comentario
        if (experiencia.getDeletecomentario() != null) {
            for (ComentarioDTO dto : experiencia.getDeletecomentario()) {
				for (ComentarioDTO comentariodto : currentExperiencia.getListcomentario()) {
					if (comentariodto.getId() == dto.getId()) {
						currentExperiencia.getListcomentario().remove(comentariodto);
					}
				}
                comentarioPersistance.deleteComentario(dto.getId());
            }
        }
        experienciaMasterDtosList.add(currentExperiencia);
    }
}