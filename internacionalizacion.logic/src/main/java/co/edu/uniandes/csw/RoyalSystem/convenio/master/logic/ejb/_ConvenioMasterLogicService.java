/* ========================================================================
 * Copyright 2014 RoyalSystem
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 RoyalSystem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.RoyalSystem.convenio.master.logic.ejb;

import co.edu.uniandes.csw.RoyalSystem.homologacion.logic.dto.HomologacionDTO;
import co.edu.uniandes.csw.RoyalSystem.homologacion.persistence.api.IHomologacionPersistence;
import co.edu.uniandes.csw.RoyalSystem.convenio.logic.dto.ConvenioDTO;
import co.edu.uniandes.csw.RoyalSystem.convenio.master.logic.api._IConvenioMasterLogicService;
import co.edu.uniandes.csw.RoyalSystem.convenio.master.logic.dto.ConvenioMasterDTO;
import co.edu.uniandes.csw.RoyalSystem.convenio.master.persistence.api.IConvenioMasterPersistence;
import co.edu.uniandes.csw.RoyalSystem.convenio.master.persistence.entity.ConveniohomologacionEntity;
import co.edu.uniandes.csw.RoyalSystem.convenio.persistence.api.IConvenioPersistence;
import javax.inject.Inject;

public abstract class _ConvenioMasterLogicService implements _IConvenioMasterLogicService {

    @Inject
    protected IConvenioPersistence convenioPersistance;
    @Inject
    protected IConvenioMasterPersistence convenioMasterPersistance;
    @Inject
    protected IHomologacionPersistence homologacionPersistance;

    public ConvenioMasterDTO createMasterConvenio(ConvenioMasterDTO convenio) {
        ConvenioDTO persistedConvenioDTO = convenioPersistance.createConvenio(convenio.getConvenioEntity());
        if (convenio.getCreatehomologacion() != null) {
            for (HomologacionDTO homologacionDTO : convenio.getCreatehomologacion()) {
                HomologacionDTO createdHomologacionDTO = homologacionPersistance.createHomologacion(homologacionDTO);
                ConveniohomologacionEntity convenioHomologacionEntity = new ConveniohomologacionEntity(persistedConvenioDTO.getId(), createdHomologacionDTO.getId());
                convenioMasterPersistance.createConveniohomologacionEntity(convenioHomologacionEntity);
            }
        }
        // update homologacion
        if (convenio.getUpdatehomologacion() != null) {
            for (HomologacionDTO homologacionDTO : convenio.getUpdatehomologacion()) {
                homologacionPersistance.updateHomologacion(homologacionDTO);
                ConveniohomologacionEntity convenioHomologacionEntity = new ConveniohomologacionEntity(persistedConvenioDTO.getId(), homologacionDTO.getId());
                convenioMasterPersistance.createConveniohomologacionEntity(convenioHomologacionEntity);
            }
        }
        return convenio;
    }

    public ConvenioMasterDTO getMasterConvenio(Long id) {
        return convenioMasterPersistance.getConvenio(id);
    }

    public void deleteMasterConvenio(Long id) {
        convenioPersistance.deleteConvenio(id);
    }

    public void updateMasterConvenio(ConvenioMasterDTO convenio) {
        convenioPersistance.updateConvenio(convenio.getConvenioEntity());

        //---- FOR RELATIONSHIP
        // persist new homologacion
        if (convenio.getCreatehomologacion() != null) {
            for (HomologacionDTO homologacionDTO : convenio.getCreatehomologacion()) {
                HomologacionDTO createdHomologacionDTO = homologacionPersistance.createHomologacion(homologacionDTO);
                ConveniohomologacionEntity convenioHomologacionEntity = new ConveniohomologacionEntity(convenio.getConvenioEntity().getId(), createdHomologacionDTO.getId());
                convenioMasterPersistance.createConveniohomologacionEntity(convenioHomologacionEntity);
            }
        }
        // update homologacion
        if (convenio.getUpdatehomologacion() != null) {
            for (HomologacionDTO homologacionDTO : convenio.getUpdatehomologacion()) {
                homologacionPersistance.updateHomologacion(homologacionDTO);
            }
        }
        // delete homologacion
        if (convenio.getDeletehomologacion() != null) {
            for (HomologacionDTO homologacionDTO : convenio.getDeletehomologacion()) {
                convenioMasterPersistance.deleteConveniohomologacionEntity(convenio.getConvenioEntity().getId(), homologacionDTO.getId());
                homologacionPersistance.deleteHomologacion(homologacionDTO.getId());
            }
        }
    }
}
