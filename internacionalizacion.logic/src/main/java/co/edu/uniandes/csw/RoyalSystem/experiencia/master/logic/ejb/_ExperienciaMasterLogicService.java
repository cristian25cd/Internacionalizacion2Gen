/* ========================================================================
 * Copyright 2014 RoyalSystem
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 RoyalSystem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.RoyalSystem.experiencia.master.logic.ejb;

import co.edu.uniandes.csw.RoyalSystem.archivo.logic.dto.ArchivoDTO;
import co.edu.uniandes.csw.RoyalSystem.archivo.persistence.api.IArchivoPersistence;
import co.edu.uniandes.csw.RoyalSystem.comentario.logic.dto.ComentarioDTO;
import co.edu.uniandes.csw.RoyalSystem.comentario.persistence.api.IComentarioPersistence;
import co.edu.uniandes.csw.RoyalSystem.experiencia.logic.dto.ExperienciaDTO;
import co.edu.uniandes.csw.RoyalSystem.experiencia.master.logic.api._IExperienciaMasterLogicService;
import co.edu.uniandes.csw.RoyalSystem.experiencia.master.logic.dto.ExperienciaMasterDTO;
import co.edu.uniandes.csw.RoyalSystem.experiencia.master.persistence.api.IExperienciaMasterPersistence;
import co.edu.uniandes.csw.RoyalSystem.experiencia.master.persistence.entity.ExperienciaarchivoEntity;
import co.edu.uniandes.csw.RoyalSystem.experiencia.master.persistence.entity.ExperienciacomentarioEntity;
import co.edu.uniandes.csw.RoyalSystem.experiencia.persistence.api.IExperienciaPersistence;
import javax.inject.Inject;

public abstract class _ExperienciaMasterLogicService implements _IExperienciaMasterLogicService {

    @Inject
    protected IExperienciaPersistence experienciaPersistance;
    @Inject
    protected IExperienciaMasterPersistence experienciaMasterPersistance;
    @Inject
    protected IComentarioPersistence comentarioPersistance;
    @Inject
    protected IArchivoPersistence archivoPersistance;

    public ExperienciaMasterDTO createMasterExperiencia(ExperienciaMasterDTO experiencia) {
        ExperienciaDTO persistedExperienciaDTO = experienciaPersistance.createExperiencia(experiencia.getExperienciaEntity());
        if (experiencia.getCreatearchivo() != null) {
            for (ArchivoDTO archivoDTO : experiencia.getCreatearchivo()) {
                ArchivoDTO createdArchivoDTO = archivoPersistance.createArchivo(archivoDTO);
                ExperienciaarchivoEntity experienciaArchivoEntity = new ExperienciaarchivoEntity(persistedExperienciaDTO.getId(), createdArchivoDTO.getId());
                experienciaMasterPersistance.createExperienciaarchivoEntity(experienciaArchivoEntity);
            }
        }
        if (experiencia.getCreatecomentario() != null) {
            for (ComentarioDTO comentarioDTO : experiencia.getCreatecomentario()) {
                ComentarioDTO createdComentarioDTO = comentarioPersistance.createComentario(comentarioDTO);
                ExperienciacomentarioEntity experienciaComentarioEntity = new ExperienciacomentarioEntity(persistedExperienciaDTO.getId(), createdComentarioDTO.getId());
                experienciaMasterPersistance.createExperienciacomentarioEntity(experienciaComentarioEntity);
            }
        }
        // update archivo
        if (experiencia.getUpdatearchivo() != null) {
            for (ArchivoDTO archivoDTO : experiencia.getUpdatearchivo()) {
                archivoPersistance.updateArchivo(archivoDTO);
                ExperienciaarchivoEntity experienciaArchivoEntity = new ExperienciaarchivoEntity(persistedExperienciaDTO.getId(), archivoDTO.getId());
                experienciaMasterPersistance.createExperienciaarchivoEntity(experienciaArchivoEntity);
            }
        }
        // update comentario
        if (experiencia.getUpdatecomentario() != null) {
            for (ComentarioDTO comentarioDTO : experiencia.getUpdatecomentario()) {
                comentarioPersistance.updateComentario(comentarioDTO);
                ExperienciacomentarioEntity experienciaComentarioEntity = new ExperienciacomentarioEntity(persistedExperienciaDTO.getId(), comentarioDTO.getId());
                experienciaMasterPersistance.createExperienciacomentarioEntity(experienciaComentarioEntity);
            }
        }
        return experiencia;
    }

    public ExperienciaMasterDTO getMasterExperiencia(Long id) {
        return experienciaMasterPersistance.getExperiencia(id);
    }

    public void deleteMasterExperiencia(Long id) {
        experienciaPersistance.deleteExperiencia(id);
    }

    public void updateMasterExperiencia(ExperienciaMasterDTO experiencia) {
        experienciaPersistance.updateExperiencia(experiencia.getExperienciaEntity());

        //---- FOR RELATIONSHIP
        // persist new archivo
        if (experiencia.getCreatearchivo() != null) {
            for (ArchivoDTO archivoDTO : experiencia.getCreatearchivo()) {
                ArchivoDTO createdArchivoDTO = archivoPersistance.createArchivo(archivoDTO);
                ExperienciaarchivoEntity experienciaArchivoEntity = new ExperienciaarchivoEntity(experiencia.getExperienciaEntity().getId(), createdArchivoDTO.getId());
                experienciaMasterPersistance.createExperienciaarchivoEntity(experienciaArchivoEntity);
            }
        }
        // update archivo
        if (experiencia.getUpdatearchivo() != null) {
            for (ArchivoDTO archivoDTO : experiencia.getUpdatearchivo()) {
                archivoPersistance.updateArchivo(archivoDTO);
            }
        }
        // delete archivo
        if (experiencia.getDeletearchivo() != null) {
            for (ArchivoDTO archivoDTO : experiencia.getDeletearchivo()) {
                experienciaMasterPersistance.deleteExperienciaarchivoEntity(experiencia.getExperienciaEntity().getId(), archivoDTO.getId());
                archivoPersistance.deleteArchivo(archivoDTO.getId());
            }
        }
        // persist new comentario
        if (experiencia.getCreatecomentario() != null) {
            for (ComentarioDTO comentarioDTO : experiencia.getCreatecomentario()) {
                ComentarioDTO createdComentarioDTO = comentarioPersistance.createComentario(comentarioDTO);
                ExperienciacomentarioEntity experienciaComentarioEntity = new ExperienciacomentarioEntity(experiencia.getExperienciaEntity().getId(), createdComentarioDTO.getId());
                experienciaMasterPersistance.createExperienciacomentarioEntity(experienciaComentarioEntity);
            }
        }
        // update comentario
        if (experiencia.getUpdatecomentario() != null) {
            for (ComentarioDTO comentarioDTO : experiencia.getUpdatecomentario()) {
                comentarioPersistance.updateComentario(comentarioDTO);
            }
        }
        // delete comentario
        if (experiencia.getDeletecomentario() != null) {
            for (ComentarioDTO comentarioDTO : experiencia.getDeletecomentario()) {
                experienciaMasterPersistance.deleteExperienciacomentarioEntity(experiencia.getExperienciaEntity().getId(), comentarioDTO.getId());
                comentarioPersistance.deleteComentario(comentarioDTO.getId());
            }
        }
    }
}
