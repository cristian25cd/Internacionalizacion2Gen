/* ========================================================================
 * Copyright 2014 RoyalSystem
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 RoyalSystem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.RoyalSystem.estadointercambio.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.RoyalSystem.estadointercambio.logic.dto.EstadoIntercambioPageDTO;
import co.edu.uniandes.csw.RoyalSystem.estadointercambio.logic.dto.EstadoIntercambioDTO;
import co.edu.uniandes.csw.RoyalSystem.estadointercambio.logic.api.IEstadoIntercambioLogicService;
import co.edu.uniandes.csw.RoyalSystem.estadointercambio.persistence.EstadoIntercambioPersistence;
import co.edu.uniandes.csw.RoyalSystem.estadointercambio.persistence.api.IEstadoIntercambioPersistence;
import co.edu.uniandes.csw.RoyalSystem.estadointercambio.persistence.entity.EstadoIntercambioEntity;
import co.edu.uniandes.csw.RoyalSystem.estadointercambio.persistence.converter.EstadoIntercambioConverter;
import static co.edu.uniandes.csw.RoyalSystem.util._TestUtil.*;

@RunWith(Arquillian.class)
public class EstadoIntercambioLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(EstadoIntercambioLogicService.class.getPackage())
				.addPackage(IEstadoIntercambioLogicService.class.getPackage())
				.addPackage(EstadoIntercambioPersistence.class.getPackage())
				.addPackage(EstadoIntercambioEntity.class.getPackage())
				.addPackage(IEstadoIntercambioPersistence.class.getPackage())
                .addPackage(EstadoIntercambioDTO.class.getPackage())
                .addPackage(EstadoIntercambioConverter.class.getPackage())
                .addPackage(EstadoIntercambioEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IEstadoIntercambioLogicService estadoIntercambioLogicService;
	
	@Inject
	private IEstadoIntercambioPersistence estadoIntercambioPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<EstadoIntercambioDTO> dtos=estadoIntercambioPersistence.getEstadoIntercambios();
		for(EstadoIntercambioDTO dto:dtos){
			estadoIntercambioPersistence.deleteEstadoIntercambio(dto.getId());
		}
	}

	private List<EstadoIntercambioDTO> data=new ArrayList<EstadoIntercambioDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			EstadoIntercambioDTO pdto=new EstadoIntercambioDTO();
			pdto.setName(generateRandom(String.class));
			pdto=estadoIntercambioPersistence.createEstadoIntercambio(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createEstadoIntercambioTest(){
		EstadoIntercambioDTO ldto=new EstadoIntercambioDTO();
		ldto.setName(generateRandom(String.class));
		
		
		EstadoIntercambioDTO result=estadoIntercambioLogicService.createEstadoIntercambio(ldto);
		
		Assert.assertNotNull(result);
		
		EstadoIntercambioDTO pdto=estadoIntercambioPersistence.getEstadoIntercambio(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
	}
	
	@Test
	public void getEstadoIntercambiosTest(){
		List<EstadoIntercambioDTO> list=estadoIntercambioLogicService.getEstadoIntercambios();
		Assert.assertEquals(list.size(), data.size());
        for(EstadoIntercambioDTO ldto:list){
        	boolean found=false;
            for(EstadoIntercambioDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getEstadoIntercambioTest(){
		EstadoIntercambioDTO pdto=data.get(0);
		EstadoIntercambioDTO ldto=estadoIntercambioLogicService.getEstadoIntercambio(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
        
	}
	
	@Test
	public void deleteEstadoIntercambioTest(){
		EstadoIntercambioDTO pdto=data.get(0);
		estadoIntercambioLogicService.deleteEstadoIntercambio(pdto.getId());
        EstadoIntercambioDTO deleted=estadoIntercambioPersistence.getEstadoIntercambio(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateEstadoIntercambioTest(){
		EstadoIntercambioDTO pdto=data.get(0);
		
		EstadoIntercambioDTO ldto=new EstadoIntercambioDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		
		
		estadoIntercambioLogicService.updateEstadoIntercambio(ldto);
		
		
		EstadoIntercambioDTO resp=estadoIntercambioPersistence.getEstadoIntercambio(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
	}
	
	@Test
	public void getEstadoIntercambioPaginationTest(){
		
		EstadoIntercambioPageDTO dto1=estadoIntercambioLogicService.getEstadoIntercambios(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		EstadoIntercambioPageDTO dto2=estadoIntercambioLogicService.getEstadoIntercambios(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(EstadoIntercambioDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(EstadoIntercambioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(EstadoIntercambioDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(EstadoIntercambioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        EstadoIntercambioPageDTO dto3=estadoIntercambioLogicService.getEstadoIntercambios(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(EstadoIntercambioDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(EstadoIntercambioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}