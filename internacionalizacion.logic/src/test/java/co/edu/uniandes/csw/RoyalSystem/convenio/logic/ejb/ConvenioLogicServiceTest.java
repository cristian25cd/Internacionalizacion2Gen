/* ========================================================================
 * Copyright 2014 RoyalSystem
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 RoyalSystem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.RoyalSystem.convenio.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.RoyalSystem.convenio.logic.dto.ConvenioPageDTO;
import co.edu.uniandes.csw.RoyalSystem.convenio.logic.dto.ConvenioDTO;
import co.edu.uniandes.csw.RoyalSystem.convenio.logic.api.IConvenioLogicService;
import co.edu.uniandes.csw.RoyalSystem.convenio.persistence.ConvenioPersistence;
import co.edu.uniandes.csw.RoyalSystem.convenio.persistence.api.IConvenioPersistence;
import co.edu.uniandes.csw.RoyalSystem.convenio.persistence.entity.ConvenioEntity;
import co.edu.uniandes.csw.RoyalSystem.convenio.persistence.converter.ConvenioConverter;
import static co.edu.uniandes.csw.RoyalSystem.util._TestUtil.*;

@RunWith(Arquillian.class)
public class ConvenioLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(ConvenioLogicService.class.getPackage())
				.addPackage(IConvenioLogicService.class.getPackage())
				.addPackage(ConvenioPersistence.class.getPackage())
				.addPackage(ConvenioEntity.class.getPackage())
				.addPackage(IConvenioPersistence.class.getPackage())
                .addPackage(ConvenioDTO.class.getPackage())
                .addPackage(ConvenioConverter.class.getPackage())
                .addPackage(ConvenioEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IConvenioLogicService convenioLogicService;
	
	@Inject
	private IConvenioPersistence convenioPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<ConvenioDTO> dtos=convenioPersistence.getConvenios();
		for(ConvenioDTO dto:dtos){
			convenioPersistence.deleteConvenio(dto.getId());
		}
	}

	private List<ConvenioDTO> data=new ArrayList<ConvenioDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			ConvenioDTO pdto=new ConvenioDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setPaisId(generateRandom(Long.class));
			pdto.setFacultaduniandesId(generateRandom(Long.class));
			pdto.setDepartamentouniandesId(generateRandom(Long.class));
			pdto=convenioPersistence.createConvenio(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createConvenioTest(){
		ConvenioDTO ldto=new ConvenioDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setPaisId(generateRandom(Long.class));
		ldto.setFacultaduniandesId(generateRandom(Long.class));
		ldto.setDepartamentouniandesId(generateRandom(Long.class));
		
		
		ConvenioDTO result=convenioLogicService.createConvenio(ldto);
		
		Assert.assertNotNull(result);
		
		ConvenioDTO pdto=convenioPersistence.getConvenio(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getPaisId(), pdto.getPaisId());	
		Assert.assertEquals(ldto.getFacultaduniandesId(), pdto.getFacultaduniandesId());	
		Assert.assertEquals(ldto.getDepartamentouniandesId(), pdto.getDepartamentouniandesId());	
	}
	
	@Test
	public void getConveniosTest(){
		List<ConvenioDTO> list=convenioLogicService.getConvenios();
		Assert.assertEquals(list.size(), data.size());
        for(ConvenioDTO ldto:list){
        	boolean found=false;
            for(ConvenioDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getConvenioTest(){
		ConvenioDTO pdto=data.get(0);
		ConvenioDTO ldto=convenioLogicService.getConvenio(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getPaisId(), ldto.getPaisId());
		Assert.assertEquals(pdto.getFacultaduniandesId(), ldto.getFacultaduniandesId());
		Assert.assertEquals(pdto.getDepartamentouniandesId(), ldto.getDepartamentouniandesId());
        
	}
	
	@Test
	public void deleteConvenioTest(){
		ConvenioDTO pdto=data.get(0);
		convenioLogicService.deleteConvenio(pdto.getId());
        ConvenioDTO deleted=convenioPersistence.getConvenio(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateConvenioTest(){
		ConvenioDTO pdto=data.get(0);
		
		ConvenioDTO ldto=new ConvenioDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setPaisId(generateRandom(Long.class));
		ldto.setFacultaduniandesId(generateRandom(Long.class));
		ldto.setDepartamentouniandesId(generateRandom(Long.class));
		
		
		convenioLogicService.updateConvenio(ldto);
		
		
		ConvenioDTO resp=convenioPersistence.getConvenio(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getPaisId(), resp.getPaisId());	
		Assert.assertEquals(ldto.getFacultaduniandesId(), resp.getFacultaduniandesId());	
		Assert.assertEquals(ldto.getDepartamentouniandesId(), resp.getDepartamentouniandesId());	
	}
	
	@Test
	public void getConvenioPaginationTest(){
		
		ConvenioPageDTO dto1=convenioLogicService.getConvenios(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		ConvenioPageDTO dto2=convenioLogicService.getConvenios(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(ConvenioDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(ConvenioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(ConvenioDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(ConvenioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        ConvenioPageDTO dto3=convenioLogicService.getConvenios(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(ConvenioDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(ConvenioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}