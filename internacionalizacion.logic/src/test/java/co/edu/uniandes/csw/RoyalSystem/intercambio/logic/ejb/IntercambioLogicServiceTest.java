/* ========================================================================
 * Copyright 2014 RoyalSystem
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 RoyalSystem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.RoyalSystem.intercambio.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.RoyalSystem.intercambio.logic.dto.IntercambioPageDTO;
import co.edu.uniandes.csw.RoyalSystem.intercambio.logic.dto.IntercambioDTO;
import co.edu.uniandes.csw.RoyalSystem.intercambio.logic.api.IIntercambioLogicService;
import co.edu.uniandes.csw.RoyalSystem.intercambio.persistence.IntercambioPersistence;
import co.edu.uniandes.csw.RoyalSystem.intercambio.persistence.api.IIntercambioPersistence;
import co.edu.uniandes.csw.RoyalSystem.intercambio.persistence.entity.IntercambioEntity;
import co.edu.uniandes.csw.RoyalSystem.intercambio.persistence.converter.IntercambioConverter;
import static co.edu.uniandes.csw.RoyalSystem.util._TestUtil.*;

@RunWith(Arquillian.class)
public class IntercambioLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(IntercambioLogicService.class.getPackage())
				.addPackage(IIntercambioLogicService.class.getPackage())
				.addPackage(IntercambioPersistence.class.getPackage())
				.addPackage(IntercambioEntity.class.getPackage())
				.addPackage(IIntercambioPersistence.class.getPackage())
                .addPackage(IntercambioDTO.class.getPackage())
                .addPackage(IntercambioConverter.class.getPackage())
                .addPackage(IntercambioEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IIntercambioLogicService intercambioLogicService;
	
	@Inject
	private IIntercambioPersistence intercambioPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<IntercambioDTO> dtos=intercambioPersistence.getIntercambios();
		for(IntercambioDTO dto:dtos){
			intercambioPersistence.deleteIntercambio(dto.getId());
		}
	}

	private List<IntercambioDTO> data=new ArrayList<IntercambioDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			IntercambioDTO pdto=new IntercambioDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setFechaCreacion(generateRandomDate());
			pdto.setEstudianteId(generateRandom(Long.class));
			pdto.setEstadoId(generateRandom(Long.class));
			pdto.setExperienciaId(generateRandom(Long.class));
			pdto.setConvenioId(generateRandom(Long.class));
			pdto=intercambioPersistence.createIntercambio(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createIntercambioTest(){
		IntercambioDTO ldto=new IntercambioDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setFechaCreacion(generateRandomDate());
		ldto.setEstudianteId(generateRandom(Long.class));
		ldto.setEstadoId(generateRandom(Long.class));
		ldto.setExperienciaId(generateRandom(Long.class));
		ldto.setConvenioId(generateRandom(Long.class));
		
		
		IntercambioDTO result=intercambioLogicService.createIntercambio(ldto);
		
		Assert.assertNotNull(result);
		
		IntercambioDTO pdto=intercambioPersistence.getIntercambio(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getFechaCreacion(), pdto.getFechaCreacion());	
		Assert.assertEquals(ldto.getEstudianteId(), pdto.getEstudianteId());	
		Assert.assertEquals(ldto.getEstadoId(), pdto.getEstadoId());	
		Assert.assertEquals(ldto.getExperienciaId(), pdto.getExperienciaId());	
		Assert.assertEquals(ldto.getConvenioId(), pdto.getConvenioId());	
	}
	
	@Test
	public void getIntercambiosTest(){
		List<IntercambioDTO> list=intercambioLogicService.getIntercambios();
		Assert.assertEquals(list.size(), data.size());
        for(IntercambioDTO ldto:list){
        	boolean found=false;
            for(IntercambioDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getIntercambioTest(){
		IntercambioDTO pdto=data.get(0);
		IntercambioDTO ldto=intercambioLogicService.getIntercambio(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getFechaCreacion(), ldto.getFechaCreacion());
		Assert.assertEquals(pdto.getEstudianteId(), ldto.getEstudianteId());
		Assert.assertEquals(pdto.getEstadoId(), ldto.getEstadoId());
		Assert.assertEquals(pdto.getExperienciaId(), ldto.getExperienciaId());
		Assert.assertEquals(pdto.getConvenioId(), ldto.getConvenioId());
        
	}
	
	@Test
	public void deleteIntercambioTest(){
		IntercambioDTO pdto=data.get(0);
		intercambioLogicService.deleteIntercambio(pdto.getId());
        IntercambioDTO deleted=intercambioPersistence.getIntercambio(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateIntercambioTest(){
		IntercambioDTO pdto=data.get(0);
		
		IntercambioDTO ldto=new IntercambioDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setFechaCreacion(generateRandomDate());
		ldto.setEstudianteId(generateRandom(Long.class));
		ldto.setEstadoId(generateRandom(Long.class));
		ldto.setExperienciaId(generateRandom(Long.class));
		ldto.setConvenioId(generateRandom(Long.class));
		
		
		intercambioLogicService.updateIntercambio(ldto);
		
		
		IntercambioDTO resp=intercambioPersistence.getIntercambio(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getFechaCreacion(), resp.getFechaCreacion());	
		Assert.assertEquals(ldto.getEstudianteId(), resp.getEstudianteId());	
		Assert.assertEquals(ldto.getEstadoId(), resp.getEstadoId());	
		Assert.assertEquals(ldto.getExperienciaId(), resp.getExperienciaId());	
		Assert.assertEquals(ldto.getConvenioId(), resp.getConvenioId());	
	}
	
	@Test
	public void getIntercambioPaginationTest(){
		
		IntercambioPageDTO dto1=intercambioLogicService.getIntercambios(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		IntercambioPageDTO dto2=intercambioLogicService.getIntercambios(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(IntercambioDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(IntercambioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(IntercambioDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(IntercambioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        IntercambioPageDTO dto3=intercambioLogicService.getIntercambios(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(IntercambioDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(IntercambioDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}