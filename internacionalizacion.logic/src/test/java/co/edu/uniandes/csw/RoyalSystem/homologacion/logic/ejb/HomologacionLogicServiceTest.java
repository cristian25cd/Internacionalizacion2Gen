/* ========================================================================
 * Copyright 2014 RoyalSystem
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 RoyalSystem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.RoyalSystem.homologacion.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.RoyalSystem.homologacion.logic.dto.HomologacionPageDTO;
import co.edu.uniandes.csw.RoyalSystem.homologacion.logic.dto.HomologacionDTO;
import co.edu.uniandes.csw.RoyalSystem.homologacion.logic.api.IHomologacionLogicService;
import co.edu.uniandes.csw.RoyalSystem.homologacion.persistence.HomologacionPersistence;
import co.edu.uniandes.csw.RoyalSystem.homologacion.persistence.api.IHomologacionPersistence;
import co.edu.uniandes.csw.RoyalSystem.homologacion.persistence.entity.HomologacionEntity;
import co.edu.uniandes.csw.RoyalSystem.homologacion.persistence.converter.HomologacionConverter;
import static co.edu.uniandes.csw.RoyalSystem.util._TestUtil.*;

@RunWith(Arquillian.class)
public class HomologacionLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(HomologacionLogicService.class.getPackage())
				.addPackage(IHomologacionLogicService.class.getPackage())
				.addPackage(HomologacionPersistence.class.getPackage())
				.addPackage(HomologacionEntity.class.getPackage())
				.addPackage(IHomologacionPersistence.class.getPackage())
                .addPackage(HomologacionDTO.class.getPackage())
                .addPackage(HomologacionConverter.class.getPackage())
                .addPackage(HomologacionEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IHomologacionLogicService homologacionLogicService;
	
	@Inject
	private IHomologacionPersistence homologacionPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<HomologacionDTO> dtos=homologacionPersistence.getHomologacions();
		for(HomologacionDTO dto:dtos){
			homologacionPersistence.deleteHomologacion(dto.getId());
		}
	}

	private List<HomologacionDTO> data=new ArrayList<HomologacionDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			HomologacionDTO pdto=new HomologacionDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setMateriaExtranjera(generateRandom(String.class));
			pdto.setEquivalenciaCreditos(generateRandom(Integer.class));
			pdto.setEstadoId(generateRandom(Long.class));
			pdto.setMateriauniandesId(generateRandom(Long.class));
			pdto=homologacionPersistence.createHomologacion(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createHomologacionTest(){
		HomologacionDTO ldto=new HomologacionDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setMateriaExtranjera(generateRandom(String.class));
		ldto.setEquivalenciaCreditos(generateRandom(Integer.class));
		ldto.setEstadoId(generateRandom(Long.class));
		ldto.setMateriauniandesId(generateRandom(Long.class));
		
		
		HomologacionDTO result=homologacionLogicService.createHomologacion(ldto);
		
		Assert.assertNotNull(result);
		
		HomologacionDTO pdto=homologacionPersistence.getHomologacion(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getMateriaExtranjera(), pdto.getMateriaExtranjera());	
		Assert.assertEquals(ldto.getEquivalenciaCreditos(), pdto.getEquivalenciaCreditos());	
		Assert.assertEquals(ldto.getEstadoId(), pdto.getEstadoId());	
		Assert.assertEquals(ldto.getMateriauniandesId(), pdto.getMateriauniandesId());	
	}
	
	@Test
	public void getHomologacionsTest(){
		List<HomologacionDTO> list=homologacionLogicService.getHomologacions();
		Assert.assertEquals(list.size(), data.size());
        for(HomologacionDTO ldto:list){
        	boolean found=false;
            for(HomologacionDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getHomologacionTest(){
		HomologacionDTO pdto=data.get(0);
		HomologacionDTO ldto=homologacionLogicService.getHomologacion(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getMateriaExtranjera(), ldto.getMateriaExtranjera());
		Assert.assertEquals(pdto.getEquivalenciaCreditos(), ldto.getEquivalenciaCreditos());
		Assert.assertEquals(pdto.getEstadoId(), ldto.getEstadoId());
		Assert.assertEquals(pdto.getMateriauniandesId(), ldto.getMateriauniandesId());
        
	}
	
	@Test
	public void deleteHomologacionTest(){
		HomologacionDTO pdto=data.get(0);
		homologacionLogicService.deleteHomologacion(pdto.getId());
        HomologacionDTO deleted=homologacionPersistence.getHomologacion(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateHomologacionTest(){
		HomologacionDTO pdto=data.get(0);
		
		HomologacionDTO ldto=new HomologacionDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setMateriaExtranjera(generateRandom(String.class));
		ldto.setEquivalenciaCreditos(generateRandom(Integer.class));
		ldto.setEstadoId(generateRandom(Long.class));
		ldto.setMateriauniandesId(generateRandom(Long.class));
		
		
		homologacionLogicService.updateHomologacion(ldto);
		
		
		HomologacionDTO resp=homologacionPersistence.getHomologacion(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getMateriaExtranjera(), resp.getMateriaExtranjera());	
		Assert.assertEquals(ldto.getEquivalenciaCreditos(), resp.getEquivalenciaCreditos());	
		Assert.assertEquals(ldto.getEstadoId(), resp.getEstadoId());	
		Assert.assertEquals(ldto.getMateriauniandesId(), resp.getMateriauniandesId());	
	}
	
	@Test
	public void getHomologacionPaginationTest(){
		
		HomologacionPageDTO dto1=homologacionLogicService.getHomologacions(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		HomologacionPageDTO dto2=homologacionLogicService.getHomologacions(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(HomologacionDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(HomologacionDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(HomologacionDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(HomologacionDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        HomologacionPageDTO dto3=homologacionLogicService.getHomologacions(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(HomologacionDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(HomologacionDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}