/* ========================================================================
 * Copyright 2014 RoyalSystem
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 RoyalSystem

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201411201032

*/

package co.edu.uniandes.csw.RoyalSystem.cliente.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.RoyalSystem.cliente.logic.dto.ClientePageDTO;
import co.edu.uniandes.csw.RoyalSystem.cliente.logic.dto.ClienteDTO;
import co.edu.uniandes.csw.RoyalSystem.cliente.logic.api.IClienteLogicService;
import co.edu.uniandes.csw.RoyalSystem.cliente.persistence.ClientePersistence;
import co.edu.uniandes.csw.RoyalSystem.cliente.persistence.api.IClientePersistence;
import co.edu.uniandes.csw.RoyalSystem.cliente.persistence.entity.ClienteEntity;
import co.edu.uniandes.csw.RoyalSystem.cliente.persistence.converter.ClienteConverter;
import static co.edu.uniandes.csw.RoyalSystem.util._TestUtil.*;

@RunWith(Arquillian.class)
public class ClienteLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(ClienteLogicService.class.getPackage())
				.addPackage(IClienteLogicService.class.getPackage())
				.addPackage(ClientePersistence.class.getPackage())
				.addPackage(ClienteEntity.class.getPackage())
				.addPackage(IClientePersistence.class.getPackage())
                .addPackage(ClienteDTO.class.getPackage())
                .addPackage(ClienteConverter.class.getPackage())
                .addPackage(ClienteEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private IClienteLogicService clienteLogicService;
	
	@Inject
	private IClientePersistence clientePersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<ClienteDTO> dtos=clientePersistence.getClientes();
		for(ClienteDTO dto:dtos){
			clientePersistence.deleteCliente(dto.getId());
		}
	}

	private List<ClienteDTO> data=new ArrayList<ClienteDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			ClienteDTO pdto=new ClienteDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setCodigo(generateRandom(Integer.class));
			pdto.setCorreo(generateRandom(String.class));
			pdto.setTipoId(generateRandom(Long.class));
			pdto=clientePersistence.createCliente(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createClienteTest(){
		ClienteDTO ldto=new ClienteDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setCodigo(generateRandom(Integer.class));
		ldto.setCorreo(generateRandom(String.class));
		ldto.setTipoId(generateRandom(Long.class));
		
		
		ClienteDTO result=clienteLogicService.createCliente(ldto);
		
		Assert.assertNotNull(result);
		
		ClienteDTO pdto=clientePersistence.getCliente(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getCodigo(), pdto.getCodigo());	
		Assert.assertEquals(ldto.getCorreo(), pdto.getCorreo());	
		Assert.assertEquals(ldto.getTipoId(), pdto.getTipoId());	
	}
	
	@Test
	public void getClientesTest(){
		List<ClienteDTO> list=clienteLogicService.getClientes();
		Assert.assertEquals(list.size(), data.size());
        for(ClienteDTO ldto:list){
        	boolean found=false;
            for(ClienteDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getClienteTest(){
		ClienteDTO pdto=data.get(0);
		ClienteDTO ldto=clienteLogicService.getCliente(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getCodigo(), ldto.getCodigo());
		Assert.assertEquals(pdto.getCorreo(), ldto.getCorreo());
		Assert.assertEquals(pdto.getTipoId(), ldto.getTipoId());
        
	}
	
	@Test
	public void deleteClienteTest(){
		ClienteDTO pdto=data.get(0);
		clienteLogicService.deleteCliente(pdto.getId());
        ClienteDTO deleted=clientePersistence.getCliente(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateClienteTest(){
		ClienteDTO pdto=data.get(0);
		
		ClienteDTO ldto=new ClienteDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setCodigo(generateRandom(Integer.class));
		ldto.setCorreo(generateRandom(String.class));
		ldto.setTipoId(generateRandom(Long.class));
		
		
		clienteLogicService.updateCliente(ldto);
		
		
		ClienteDTO resp=clientePersistence.getCliente(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getCodigo(), resp.getCodigo());	
		Assert.assertEquals(ldto.getCorreo(), resp.getCorreo());	
		Assert.assertEquals(ldto.getTipoId(), resp.getTipoId());	
	}
	
	@Test
	public void getClientePaginationTest(){
		
		ClientePageDTO dto1=clienteLogicService.getClientes(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		ClientePageDTO dto2=clienteLogicService.getClientes(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(ClienteDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(ClienteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(ClienteDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(ClienteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        ClientePageDTO dto3=clienteLogicService.getClientes(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(ClienteDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(ClienteDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}